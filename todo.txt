PROJECT HARD DEADLINE:  08/02/2021

RUNNING TASKS (commit after each)

1. Update directory structure for SASS x
2. Add grid item elements to markup x
2. Add header layout styles to SCSS for mobile x
3. Add "npm install -g sass" command to run on workspace startup" and "sass --watch assets/scss:assets/css" x
2. Finish layout styles for scoreboard, click to play and gameboard sections for mobile x
3. Add layout styles for footer for mobile x
3. Create mix-in for flexbox css styles x 
* Make layout responsive on tablet viewports x
* Make layout responsive on desktop viewports x
* refactor scss to create variables for values reused across viewport sizes? x
* Add border effects and styling to click to play section x
* Add border effects and styling to scoreboard section x
* Create markup for welcome modal x
* layout styling for welcome modal x
* create tests for welcome modal x
* write generateTeX function to create TeX from expression strings TeX (note may need to move initializeGameboardHTML to be instance method outside of constructor if problems in future...)
* load libraries in specRunner.html to run initilaization tests for gameboard x
* refactor gameboard.js :invoke single initializeGameboard() func in constructor x
* Make modal scrollable x
* chnage click to play button border in welcome modal x
* Add gridlines to gameboard x
* refactor modals.js to make class for welcomeModal x
* implement hideGameboardOverlay() x
* need to find a way to reference gameboard instance from content of event listener x
* finish implementing checkUserAnswer x
* write tests and implement Scoreboard class (implement method to calcuate score after a question is answered) x
* write tests and implement click to play class - implement beginPlayerTurn abstraction and write tests and implement it's inner functions, tests and implementation for countdown timer
* replace +- and -+ and -- in gameboard expressions
* Create markup for gameover modal
* layout styling for gameover modal
* add tests for gameover modal
* write js for gameover modal
* Create markup for how to play 'pop up'
* layout styling for how to play 'pop up'
* add sumbit error messages to welcome modal
* add static colours to all elements
* add cursor:pointer to gameboard items when event listeners are active
* add pulsing to ? icon and restart game button
* added calculate score message in gameboard overlay
* fix gameboard grid horizontal margins
* style buttons in gameboard overlay
* add user feedback visual effects to all interactive elements (hover, click)
* perform full manual testing on all elements of page of layout, sizing on different screen sizes
* Perform full manual testing of functionality of game


* confirm no error messages or log messages in console
* deploy site
* post on slack for advice on writing unit tests and TDD workflow advice

README

* Implement internal links in TOC to relevant sections
* Reflections section

FEATURES (Priority: P1, P2, P3)

* Countdown timer P2
* Scoreboard no. turns P1
* Scoreboard total score P1
* Scoreboard bonus P2
* Easier/harder difficulty setting P2
* Gameboard grid P1
* Click to play elemetn with random number generator P1
* Evaluate expression input and validator P1
* How to play togglable (show / hide) info element P3
* Welcome modal P3
* Togglable (show/hide) 'About' footer. P3 
* Game over modal P3


POSSIBLE EXTRA FEATURES


* Add media query styling specifically for print view so teachers can print activity for use in lessons
* Create a log of player responses and include option to Email to teacher on 'game over' modal
* Optional settings for time limit per turn and number of turns per game and number of grid elements
* Share on facebook/twitter link on game over page
* Audio played as user feedback when clicking on elements of page and at significant points in gameplay
* Insert error messages into HTML 
* Increase number of grid elements to 20
* Store top scores for each player in local storage so when restart game is clicked, player performance can be measured across multiple games. 
* Add click event listener to body so that user can bring manually invoke the start of next turn once they have read feedback from gameboard overlay.

ACCESSIBILITY CHECKLIST

* Add title and aria-label attributes to links and interactive elements


QUESTIONS FOR ARNOLD/TUTORING/SLACK

* When initially writing HTML content, should I add id, class and data-* attributions for css/js selection at this point or later onceI know what needs to be selected and how? x
* Tips for how to work effectively on a project to create MVP more quickly ad add in extra features/styling later?
* When loading fixtures into Jasmine tests to test DOM manipulation I could not find a way to get loadFixtures() function to work with index.html file

HIGH LEVEL ARCHITECTURE OF PROGRAM FUNCTIONALITY

*Objects and data

questions (array)
gameboard (object, .addQuestion())
scoreboard (object, .updateTurns(), updateTotal())
timer(.start(), .end())
randomNumber(.generate())

*Scenes

Welcome
Main game
Game over

*Logic

choose expression (function)
check user input (function)
calculate score (function)
endGame(function)

User interaction

click grid element (onClick)
inout expression value (on click and keyboard input)
click to play (onClick)
open info (onClick)
open about footer (onClick)

