PROJECT HARD DEADLINE:  08/02/2021

RUNNING TASKS (commit after each)

1. Update directory structure for SASS x
2. Add grid item elements to markup x
2. Add header layout styles to SCSS for mobile x
3. Add "npm install -g sass" command to run on workspace startup" and "sass --watch assets/scss:assets/css" x
2. Finish layout styles for scoreboard, click to play and gameboard sections for mobile x
3. Add layout styles for footer for mobile x
3. Create mix-in for flexbox css styles x 
* Make layout responsive on tablet viewports x
* Make layout responsive on desktop viewports x
* refactor scss to create variables for values reused across viewport sizes? x
* Add border effects and styling to click to play section x
* Add border effects and styling to scoreboard section x
* Create markup for welcome modal x
* layout styling for welcome modal x
* create tests for welcome modal x
* write generateTeX function to create TeX from expression strings TeX (note may need to move initializeGameboardHTML to be instance method outside of constructor if problems in future...)

* load libraries in specRunner.html to run initilaization tests for gameboard
* add tests for gameboard functionality ....
* write JS for gameboard
* refactor modals.js
* refactor gameboard.js (remove this.expressions)
* Make modal scrollable (see bootstrap)
* Add gridlines to gameboard
* Create markup for how to play 'pop up'
* layout styling for how to play 'pop up'
* add tests for how to play 'pop up
* write js for ho to play pop up
* Create markup for gameover modal
* layout styling for gameover modal
* add tests for gameover modal
* write js for gameover modal
* Choose new body font(s)? (more readable)



README

* Implement internal links in TOC to relevant sections
* Reflections section

FEATURES (Priority: P1, P2, P3)

* Countdown timer P2
* Scoreboard no. turns P1
* Scoreboard total score P1
* Scoreboard bonus P2
* Easier/harder difficulty setting P2
* Gameboard grid P1
* Click to play elemetn with random number generator P1
* Evaluate expression input and validator P1
* How to play togglable (show / hide) info element P3
* Welcome modal P3
* Togglable (show/hide) 'About' footer. P3 
* Game over modal P3


POSSIBLE EXTRA FEATURES

* Facilitate user interaction with keyboard
* Add media query styling specifically for print view so teachers can print activity for use in lessons
* Email to teacher input and submit for 'game over' modal
* Optional settings for time limit per turn and number of turns per game and number of grid elements
* Share on facebook/twitter link on game over page
* High score log for each player name in window/local storage - display on game over page?
* Audio played as user feedback when clicking on elements of page and at significant points in gameplay
* Math handwriting recognition API?
* Insert error messages into HTML 
* Increase number of grid elements to 20

    POSSIBLE ADDITIONS TO STYLING

* Combat theme icons on welcome modal
* Celebration theme icons on game over modal
* ADVICE FROM MS1: Use box shadow effect to make elements stand out x
* Torn paper or other border effect
* Load extra font for body?

ACCESSIBILITY CHECKLIST

* Add title and aria-label attributes to links and interactive elements


QUESTIONS FOR ARNOLD/TUTORING/SLACK

* When initially writing HTML content, should I add id, class and data-* attributions for css/js selection at this point or later onceI know what needs to be selected and how? x
* Tips for how to work effectively on a project to create MVP more quickly ad add in extra features/styling later?
* When loading fixtures into Jasmine tests to test DOM manipulation I could not find a way to get loadFixtures() function to work with index.html file

HIGH LEVEL ARCHITECTURE OF PROGRAM FUNCTIONALITY

*Objects and data

questions (array)
gameboard (object, .addQuestion())
scoreboard (object, .updateTurns(), updateTotal())
timer(.start(), .end())
randomNumber(.generate())

*Scenes

Welcome
Main game
Game over

*Logic

choose expression (function)
check user input (function)
calculate score (function)
endGame(function)

User interaction

click grid element (onClick)
inout expression value (on click and keyboard input)
click to play (onClick)
open info (onClick)
open about footer (onClick)

